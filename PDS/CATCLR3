/* --------------------------------- REXX ---------------------------------- */
/*  CATCLR3 Exec       THIS IS A UTILITY EXEC                                */
/* ------------------------------------------------------------------------- */
/* Author: David G. Kopischke                                                */
/* Notes:  Catalog Scan REXX EXEC.                                           */
/* Usage:  This software may be distributed freely to anyone. You may not    */
/*         sell this software nor package it with software that is sold for  */
/*         profit.                                                           */
/* ------------------------------------------------------------------------- */
/* REXX EXEC to clear all catalogs of all datasets cataloged but not present */
/* on the volume it is cataloged to.                                         */
/*                                                                           */
/* ------------------------------------------------------------------------- */
/* Function: List every file cataloged in the supplied catalog. Find every   */
/*           file cataloged to a specified volume or volume mask. Verify     */
/*           the existence of every file cataloged to the volume specified.  */
/*           If the file does not exist, generate an IDCAMS DELETE NOSCRATCH */
/*           statement for the file and write to a dataset for subsequent    */
/*           execution.                                                      */
/*                                                                           */
/* ------------------------------------------------------------------------- */
/* *************************** REVISION HISTORY **************************** */
/* ACID  +   DATE   + Change Description                                     */
/* ------+----------+------------------------------------------------------- */
/* TSDGK +01/12/2000+ Initial Version.                                       */
/* ------+----------+------------------------------------------------------- */
/*       +          +                                                        */
/* ------+----------+------------------------------------------------------- */

PARSE UPPER ARG RunType CatToScan Vols DisplayDetails Trace .

IF Trace="Y" THEN DO
   TRACE ?I                                  /* Turn Tracing ON              */
 /*TRACE ?R */                               /* Turn Tracing ON              */
END  /* IF */

SAY "Run Type="RunType
SAY "Catalog Name="CatToScan
SAY "Volumes to clean up="Vols"   <== This is not functional at this time"

/* ------------------------------------------------------------------------- */
/* Collect all of the objects cataloged in the specified catalog.            */
/* ------------------------------------------------------------------------- */
VSAMFilesFound=0;SEQFilesFound=0;CATFilesFound=0;FilestoUncatalog=0
Filename="";SkippedRecs=0;DisplayLimit="N";VolRefFound="N";VolRefCount=0
X=1;k=0;End_of_File="N";Done="N"
/* IF CatToScan = "USERCAT.????????" THEN DO */
/*    TRACE ?i */                           /* Turn Tracing ON               */
/*    TRACE ?R */                           /* Turn Tracing ON               */
/* END*//* DO */

CntlFileName=USERID()||"."||CatToScan||".CNTL"
ListFileName=USERID()||"."||CatToScan||".SYSPRINT"
SAY "************************************************************"
SAY "The files to support processing of catalog "CatToScan" are:"
SAY "   The IDCAMS Output File name is :" ListFileName
SAY "   The DELETE Control File name is:" CntlFileName
SAY "************************************************************"
SAY " "
"PROFILE NOPREFIX"
MsgStat = MSG('OFF')
"FREE F(CTLOUT LISTFILE)"
"DELETE '"CntlFileName"' PURGE"
"DELETE '"ListFileName"' PURGE"
MsgStat = MSG('ON')
"ALLOC DA('"CntlFileName"') F(CTLOUT) NEW REUSE",
       "CYLINDER SPACE(10 10) RECFM(F B) LRECL(80) BLKSIZE(27920)"
RetCode=rc
IF RetCode /= 0 THEN DO
   SAY "************************************************************"
   SAY "An ERROR was detected ALLOCating the IDCAMS Control file for",
       "Catalog: "CatToScan
   SAY "   The return code from ALLOC is: " RetCode
   SAY "************************************************************"
   MaxRC=12
   SIGNAL EXIT
END    /* IF */
"ALLOC DA('"ListFileName"') F(LISTFILE) NEW REUSE",
       "CYLINDER SPACE(10 10) RECFM(V B A) LRECL(133) BLKSIZE(27930)"
RetCode=rc
IF RetCode /= 0 THEN DO
   SAY "************************************************************"
   SAY "An ERROR was detected ALLOCating the LISTFILE file for",
       "Catalog: "CatToScan
   SAY "   The file name being ALLOCated is:" ListFileName
   SAY "   The return code from ALLOC is: " RetCode
   SAY "************************************************************"
   MaxRC=12
   SIGNAL EXIT
END    /* IF */
/* ------------------------------------------------------------------------- */
/* Removed VOL sub-parameter because of catalog issues that kept the         */
/* LISTCAT from getting a complete list of files.                            */
/* ------------------------------------------------------------------------- */
/* "LISTCAT CATALOG('"CatToScan"') VOL" */      /* Collect the names of all  */
"LISTCAT CATALOG('"CatToScan"')"||,             /* Collect the names of all  */
"        OUTFILE(LISTFILE)"                     /* files in the User Catalog */

RetCode=rc
IF RetCode \= 0 THEN DO
   SAY "************************************************************"
   IF RetCode > 8 THEN DO
      SAY "***                                                      ***"
      SAY "***  !!!!!!  SERIOUS CATALOG ERROR ENCOUNTERED  !!!!!!!  ***"
      SAY "***                                                      ***"
      SAY "************************************************************"
      SAY "***                                                      ***"
      SAY "***  !!!!!!  SERIOUS CATALOG ERROR ENCOUNTERED  !!!!!!!  ***"
      SAY "***                                                      ***"
      SAY "************************************************************"
      SAY "***                                                      ***"
      SAY "***                                                      ***"
   END  /* IF */
   SAY "An ERROR was detected performing LISTCAT for User Catalog:",
        CatToScan
   SAY "   The return code from LISTCAT is: " RetCode
   SAY "************************************************************"
   SAY "   The file containing the LISTCAT information is: " ListFileName
   SAY "   Error messages may be in this file or in SYSPRINT."
   SAY " "
   IF RetCode > 4 THEN DO UNTIL End_of_File="Y"
      "EXECIO 1 DISKR LISTFILE"
      RetCode=rc
      IF RetCode = "2" THEN DO
         End_of_File="Y"
         "EXECIO 0 DISKR LISTFILE (FINIS"
         "EXECIO 0 DISKW CTLOUT (FINIS"
         SAY "************************************************************"
         SAY "*** End of File reached for data from catalog: " CatToScan
         SAY "************************************************************"
      END  /* IF */
      PULL FileData
      k=k+1
      SAY "FileList Entry: "RIGHT(k,4," ") "    Data: "FileData
      IF k > 10000 & DisplayLimit="N" THEN DO
         DisplayLimit="Y"
         End_of_File="Y"
         "EXECIO 0 DISKR LISTFILE (FINIS"
         "EXECIO 0 DISKW CTLOUT (FINIS"
      END  /* IF */
   END  /* IF */
   SAY "************************************************************"
   IF RetCode > 8 THEN DO
      MaxRC=12
      SIGNAL EXIT
   END  /* IF */
END  /* IF */

Cntl = " /"||"* FILES TO UNCATALOG IN CATALOG ==>"CatToScan"<==  *"||"/"
PUSH Cntl
"EXECIO 1 DISKW CTLOUT"
SAY "IDCAMS Control Entry:"RIGHT(X,4," ")"  is:" Cntl
Cntl=""
/* ------------------------------------------------------------------------- */
/* Find the files you want.                                                  */
/* ------------------------------------------------------------------------- */
"EXECIO 1 DISKR LISTFILE"
RetCode=rc
IF RetCode = "2" THEN DO
   End_of_File="Y"
   FileData=""
   "EXECIO 0 DISKR LISTFILE (FINIS"
   "EXECIO 0 DISKW CTLOUT (FINIS"
   SAY "************************************************************"
   SAY "***              EMPTY DATASET DETECTED                  ***"
   SAY "*** End of File reached on first read of file: " ListFileName
   SAY "***     For Catalog: " CatToScan
   SAY "***     Return Code from EXECIO is: "RetCode
   SAY "************************************************************"
   MaxRC=12
   SIGNAL EXIT
END  /* IF */
PULL FileData
PARSE VAR FileData p1 p2 p3 p4 p5 .
DO UNTIL End_of_File="Y"
   CALL Process_List
END  /* DO */

IF X = 1 THEN DO
   SAY "************************************************************"
   SAY "***            No Catalog Entries to Delete              ***"
   SAY "*** The EXEC found no catalog entries to delete for      ***"
   SAY "***     Catalog: " CatToScan
   SAY "************************************************************"
END  /* IF */
ELSE DO
   UncatCount = X - 1
   SAY "************************************************************"
   SAY "*** The EXEC found "UncatCount" Catalog entries to delete***"
   SAY "*** for Catalog: " CatToScan
   SAY "************************************************************"
END  /* ELSE */
"FREE F(CTLOUT LISTFILE)"
SAY "=================================================================="
SAY "***                 Processing Statistics                      ***"
SAY "***"
SAY "*** The EXEC found "CATFilesFound" User Catalogs files in the catalogs"
SAY "***"
SAY "*** The EXEC found "VSAMFilesFound" VSAM files in the catalogs"
SAY "***"
SAY "*** The EXEC found "SEQFilesFound" Sequential files in the catalogs"
SAY "***"
SAY "***"
SAY "*** The EXEC found "FilestoUncatalog" files to uncatalog"
SAY "***"
SAY "=================================================================="

EXIT:
IF MaxRC > 4 THEN rc=MaxRC
ELSE rc=0
EXIT rc

/* ------------------------------------------------------------------------- */
/* Process_List Procedure                                                    */
/* This Procedure processes the LISTCAT results looking for cataloged files  */
/* that are not on the volume the catalog says its on.                       */
/* ------------------------------------------------------------------------- */
Process_List:

Done="N"

SELECT
   /* ---------------------------------------------------------------------- */
   /* Ignore the Catalog Cluster information.                                */
   /* ---------------------------------------------------------------------- */
   WHEN ((p1 = "CLUSTER",
      | p1 = "0CLUSTER"),
      & SUBSTR(p3,1,10) = "0000000000") THEN DO
        CATFilesFound = CATFilesFound + 1
        DO UNTIL Done="Y"
           "EXECIO 1 DISKR LISTFILE"
           RetCode=rc
           IF RetCode = "2" THEN DO
              End_of_File="Y";Done="Y"
              FileData=""
              "EXECIO 0 DISKR LISTFILE (FINIS"
              "EXECIO 0 DISKW CTLOUT (FINIS"
              IF X = 1 THEN DO
                 SAY "****************************************************"||,
                     "********"
                 SAY "***               No Files to Uncatalog             "||,
                     "    ***"
                 SAY "*** The EXEC found no catalog entries to delete for"||,
                     "      ***"
                 SAY "***     Catalog: " CatToScan
                 SAY "****************************************************"||,
                     "********"
              END  /* IF */
              ELSE DO
                 UncatCount = X - 1
                 SAY "****************************************************"||,
                     "********"
                 SAY "*** The EXEC found "UncatCount" Catalog entries to "||,
                     "delete for      ***"
                 SAY "***     Catalog: " CatToScan
                 SAY "****************************************************"||,
                     "********"
              END  /* ELSE */
              SAY "*******************************************************"||,
                  "*****"
              SAY "*** End of File reached on file: " ListFileName
              SAY "***     For Catalog: " CatToScan
              SAY "*******************************************************"||,
                  "*****"
              ITERATE
           END  /* IF */
           ELSE DO
              PULL FileData
              PARSE VAR FileData p1 p2 p3 p4 p5 .
              IF (p1 = "CLUSTER",
               | p1 = "0CLUSTER",
               | p1 = "NONVSAM",
               | p1 = "0NONVSAM",
               | p1 = "ALIAS",
               | p1 = "0ALIAS",
               | p1 = "PAGESPACE",
               | p1 = "0PAGESPACE",
               | p1 = "USERCATALOG",
               | p1 = "0USERCATALOG",
               | (p1 = "GDG" & p2 = "BASE"),
               | (p1 = "0GDG" & p2 = "BASE"),
               | End_of_File="Y") THEN DO
                 Done="Y"
                 ITERATE
              END  /* IF */
           END  /* ELSE */
           ITERATE
      END  /* DO */
   END  /* WHEN */
   /* ---------------------------------------------------------------------- */
   /* Collect information about VSAM Clusters.                               */
   /* ---------------------------------------------------------------------- */
   WHEN p1 = "CLUSTER",
      | p1 = "0CLUSTER" THEN DO
        FileName=p3
        VSAMFilesFound = VSAMFilesFound + 1
        DO UNTIL Done="Y"
           "EXECIO 1 DISKR LISTFILE"
           RetCode=rc
           IF RetCode = "2" THEN DO
              End_of_File="Y";Done="Y"
              FileData=""
              "EXECIO 0 DISKR LISTFILE (FINIS"
              "EXECIO 0 DISKW CTLOUT (FINIS"
              IF X = 1 THEN DO
                 SAY "****************************************************"||,
                     "********"
                 SAY "***               No Files to Uncatalog             "||,
                     "        ***"
                 SAY "*** The EXEC found no catalog entries to delete for"||,
                     "      ***"
                 SAY "***     Catalog: " CatToScan
                 SAY "****************************************************"||,
                     "********"
              END  /* IF */
              ELSE DO
                 UncatCount = X - 1
                 SAY "****************************************************"||,
                     "********"
                 SAY "*** The EXEC found "UncatCount" Catalog "||,
                     "entries to delete for      ***"
                 SAY "***     Catalog: " CatToScan
                 SAY "****************************************************"||,
                     "********"
              END  /* ELSE */
              SAY "*******************************************************"||,
                  "*****"
              SAY "*** End of File reached on file: " ListFileName
              SAY "***     For Catalog: " CatToScan
              SAY "*******************************************************"||,
                  "*****"
              ITERATE
           END  /* IF */
           PULL FileData
           PARSE VAR FileData p1 p2 p3 p4 p5 .
           IF (p1 = "CLUSTER",
            | p1 = "0CLUSTER",
            | p1 = "NONVSAM",
            | p1 = "0NONVSAM",
            | p1 = "ALIAS",
            | p1 = "0ALIAS",
            | p1 = "PAGESPACE",
            | p1 = "0PAGESPACE",
            | p1 = "USERCATALOG",
            | p1 = "0USERCATALOG",
            | (p1 = "GDG" & p2 = "BASE"),
            | (p1 = "0GDG" & p2 = "BASE"),
            | End_of_File="Y") THEN DO
              IF SUBSTR(FileName,1,1) = "R" THEN DO
                 VolRefFound = "Y"
                 VolRefCount = VolRefCount + 1
              END  /* IF */
              RetCode=File_LISTDSI(FileName)
              IF RetCode /= 0,
               & (SYSREASON = "0022",
               | SYSREASON = "0024") THEN DO
                 X=X+1
                 FilestoUncatalog = FilestoUncatalog + 1
                 IF RunType="T" THEN DO
                    Cntl = " LISTCAT ENTRY("FileName") ALL"
                    IF DisplayDetails = "Y" THEN
                       SAY "IDCAMS Control Entry:"RIGHT(X,4," ")" is:" Cntl
                    PUSH Cntl
                    "EXECIO 1 DISKW CTLOUT"
                    Cntl="";FileName=""
                 END  /* IF */
                 ELSE DO
                    IF VolRefFound = "Y" THEN DO
                       Cntl = " /* VOLREF "LEFT(fileName,44," ")" VOLREF */"
                    END  /* IF */
                    ELSE DO
                       Cntl = " DELETE "LEFT(fileName,44," ")" NOSCRATCH"
                    END  /* ELSE */
                    IF DisplayDetails = "Y" THEN
                       SAY "IDCAMS Control Entry:"RIGHT(X,4," ")" is:" Cntl
                    PUSH Cntl
                    "EXECIO 1 DISKW CTLOUT"
                    Cntl="";FileName=""
                 END  /* ELSE */
              END    /* IF */
              Done="Y";VolRefFound="N"
              ITERATE
           END  /* IF */
        END  /* DO */
   END  /* WHEN */
   /* ---------------------------------------------------------------------- */
   /* Collect information about NONVSAM Files.                               */
   /* ---------------------------------------------------------------------- */
   WHEN p1 = "NONVSAM",
      | p1 = "0NONVSAM" THEN DO
        FileName=p3
        SEQFilesFound = SEQFilesFound + 1
        DO UNTIL Done="Y"
           "EXECIO 1 DISKR LISTFILE"
           RetCode=rc
           IF RetCode = "2" THEN DO
              End_of_File="Y";Done="Y"
              FileData=""
              "EXECIO 0 DISKR LISTFILE (FINIS"
              "EXECIO 0 DISKW CTLOUT (FINIS"
              IF X = 1 THEN DO
                 SAY "****************************************************"||,
                     "********"
                 SAY "***            No Catalog Entries to Delete         "||,
                     "     ***"
                 SAY "*** The EXEC found no catalog entries to delete for"||,
                     "      ***"
                 SAY "***     Catalog: " CatToScan
                 SAY "****************************************************"||,
                     "********"
              END  /* IF */
              ELSE DO
                 UncatCount = X - 1
                 SAY "****************************************************"||,
                     "********"
                 SAY "*** The EXEC found "UncatCount" Catalog entries to "||,
                     "delete for      ***"
                 SAY "***     Catalog: " CatToScan
                 SAY "****************************************************"||,
                     "********"
              END  /* ELSE */
              SAY "*******************************************************"||,
                  "*****"
              SAY "*** End of File reached on file: " ListFileName
              SAY "***     For Catalog: " CatToScan
              SAY "*******************************************************"||,
                  "*****"
              ITERATE
           END  /* IF */
           PULL FileData
           PARSE VAR FileData p1 p2 p3 p4 p5 .
           IF (p1 = "CLUSTER",
            | p1 = "0CLUSTER",
            | p1 = "NONVSAM",
            | p1 = "0NONVSAM",
            | p1 = "ALIAS",
            | p1 = "0ALIAS",
            | p1 = "PAGESPACE",
            | p1 = "0PAGESPACE",
            | p1 = "USERCATALOG",
            | p1 = "0USERCATALOG",
            | (p1 = "GDG" & p2 = "BASE"),
            | (p1 = "0GDG" & p2 = "BASE"),
            | End_of_File="Y") THEN DO
              IF SUBSTR(FileName,1,1) = "R" THEN DO
                 VolRefFound = "Y"
                 VolRefCount = VolRefCount + 1
              END  /* IF */
              RetCode=File_LISTDSI(FileName)
              IF RetCode /= 0,
               & (SYSREASON = "0022",
               | SYSREASON = "0024") THEN DO
                 X=X+1
                 FilestoUncatalog = FilestoUncatalog + 1
                 IF RunType="T" THEN DO
                    Cntl = " LISTCAT ENTRY("FileName") ALL"
                    IF DisplayDetails = "Y" THEN
                       SAY "IDCAMS Control Entry:"RIGHT(X,4," ")" is:" Cntl
                    PUSH Cntl
                    "EXECIO 1 DISKW CTLOUT"
                    Cntl="";FileName=""
                 END  /* IF */
                 ELSE DO
                    IF VolRefFound = "Y" THEN DO
                       Cntl = " /* VOLREF "LEFT(fileName,44," ")" VOLREF */"
                    END  /* IF */
                    ELSE DO
                       Cntl = " DELETE "LEFT(fileName,44," ")" NOSCRATCH"
                    END  /* ELSE */
                    IF DisplayDetails = "Y" THEN
                       SAY "IDCAMS Control Entry:"RIGHT(X,4," ")" is:" Cntl
                    PUSH Cntl
                    "EXECIO 1 DISKW CTLOUT"
                    Cntl="";FileName=""
                 END  /* ELSE */
              END    /* IF */
              Done="Y";VolRefFound="N"
              ITERATE
           END  /* IF */
        END  /* DO */
   END  /* WHEN */
   OTHERWISE
        "EXECIO 1 DISKR LISTFILE"
        RetCode=rc
        IF RetCode = "2" THEN DO
           End_of_File="Y";Done="Y"
           FileData=""
           "EXECIO 0 DISKR LISTFILE (FINIS"
           "EXECIO 0 DISKW CTLOUT (FINIS"
           IF X = 1 THEN DO
              SAY "*******************************************************"||,
                  "*****"
              SAY "***            No Catalog Entries to Delete            "||,
                  "  ***"
              SAY "*** The EXEC found no catalog entries to delete for    "||,
                  "  ***"
              SAY "***     Catalog: " CatToScan
              SAY "*******************************************************"||,
                  "*****"
           END  /* IF */
           ELSE DO
              UncatCount = X - 1
              SAY "*******************************************************"||,
                  "*****"
              SAY "*** The EXEC found "UncatCount" Catalog entries to "||,
                  "delete for      ***"
              SAY "***     Catalog: " CatToScan
              SAY "*******************************************************"||,
                  "*****"
           END  /* ELSE */
           SAY "**********************************************************"||,
               "**"
           SAY "*** End of File reached on file: " ListFileName
           SAY "***     For Catalog: " CatToScan
           SAY "**********************************************************"||,
               "**"
        END  /* IF */
        ELSE DO
           PULL FileData
           PARSE VAR FileData p1 p2 p3 p4 p5 .
        END  /* ELSE */
END  /* SELECT */

RETURN

/* ------------------------------------------------------------------------- */
/* File_LISTDSI function                                                     */
/* This function receives a file name in the call and displays information   */
/* about that file.                                                          */
/* ------------------------------------------------------------------------- */
File_LISTDSI:
ARG LISTDSIFile

/* ------------------------------------------------------------------------- */
/* Determine if the file name passed includes a PDS member in the name.      */
/* ------------------------------------------------------------------------- */
PDSIndicator=INDEX(LISTDSIFile,"(",1)
IF PDSIndicator > 0 THEN DO
   LISTDSIFile=SUBSTR(LISTDSIFile,1,PDSIndicator-1)
END    /* IF */

/* ------------------------------------------------------------------------- */
/* Determine if the file name passed includes a PDS member in the name.      */
/* ------------------------------------------------------------------------- */
LISTDSIFile="'" || LISTDSIFile || "'"
IF DisplayDetails = "Y" THEN DO
   SAY "The LISTDSI File Name Parsed is: " LISTDSIFile
END    /* IF */

/* ------------------------------------------------------------------------- */
/* If the file was determined to be a PDS, include directory information.    */
/* ------------------------------------------------------------------------- */
IF PDSIndicator > 0 THEN DO
   RetCode=LISTDSI(LISTDSIFile "DIRECTORY")
END    /* IF */
ELSE DO
   RetCode=LISTDSI(LISTDSIFile)
END    /* ELSE */

/* ------------------------------------------------------------------------- */
/* Associate meaningful text to the SYSREASON code returned from LISTDSI.    */
/* ------------------------------------------------------------------------- */
SELECT
   WHEN SYSREASON=0000 THEN DO
        SYSREASONTXT=""
   END    /* WHEN */
   WHEN SYSREASON="" THEN DO
        SYSREASONTXT=""
   END    /* WHEN */
   WHEN SYSREASON=0001 THEN DO
        SYSREASONTXT=SYSREASON" - Error Parsing the Function"
   END    /* WHEN */
   WHEN SYSREASON=0002 THEN DO
        SYSREASONTXT=SYSREASON" - Dynamic Allocation Processing Error"
   END    /* WHEN */
   WHEN SYSREASON=0003 THEN DO
        SYSREASONTXT=SYSREASON" - DataSet is a Type That Cannot Be Processed"
   END    /* WHEN */
   WHEN SYSREASON=0004 THEN DO
        SYSREASONTXT=SYSREASON" - Error Determining UNIT Name"
   END    /* WHEN */
   WHEN SYSREASON=0005 THEN DO
        SYSREASONTXT=SYSREASON" - DataSet Not Cataloged"
   END    /* WHEN */
   WHEN SYSREASON=0006 THEN DO
        SYSREASONTXT=SYSREASON" - Error Obtaining the DataSet Name"
   END    /* WHEN */
   WHEN SYSREASON=0007 THEN DO
        SYSREASONTXT=SYSREASON" - Error Finding the Device Type"
   END    /* WHEN */
   WHEN SYSREASON=0008 THEN DO
        SYSREASONTXT=SYSREASON" - The Dataset Does Not Reside on DASD"
   END    /* WHEN */
   WHEN SYSREASON=0009 THEN DO
        SYSREASONTXT=SYSREASON" - DFHSM Migrated the DataSet - NORECALL"
   END    /* WHEN */
   WHEN SYSREASON=0011 THEN DO
        SYSREASONTXT=SYSREASON" - Directory Information requested - Denied"
   END    /* WHEN */
   WHEN SYSREASON=0012 THEN DO
        SYSREASONTXT=SYSREASON" - VSAM DataSets are Not Supported"
   END    /* WHEN */
   WHEN SYSREASON=0013 THEN DO
        SYSREASONTXT=SYSREASON" - The DataSet Could Not Be Opened"
   END    /* WHEN */
   WHEN SYSREASON=0014 THEN DO
        SYSREASONTXT=SYSREASON" - Device Type Not Found in UCB Tables"
   END    /* WHEN */
   WHEN SYSREASON=0017 THEN DO
        SYSREASONTXT=SYSREASON" - System or User Abend Occurred"
   END    /* WHEN */
   WHEN SYSREASON=0018 THEN DO
        SYSREASONTXT=SYSREASON" - Partial DataSet Information Obtained"
   END    /* WHEN */
   WHEN SYSREASON=0019 THEN DO
        SYSREASONTXT=SYSREASON" - DataSet Resides on Multiple Volumes"
   END    /* WHEN */
   WHEN SYSREASON=0020 THEN DO
        SYSREASONTXT=SYSREASON" - Device Type Not Found in Eligible Dev Tab"
   END    /* WHEN */
   WHEN SYSREASON=0021 THEN DO
        SYSREASONTXT=SYSREASON" - Catalog Error Trying to Locate DataSet"
   END    /* WHEN */
   WHEN SYSREASON=0022 THEN DO
        SYSREASONTXT=SYSREASON" - Volume Not Mounted"
   END    /* WHEN */
   WHEN SYSREASON=0023 THEN DO
        SYSREASONTXT=SYSREASON" - Permanent I/O Error on Volume"
   END    /* WHEN */
   WHEN SYSREASON=0024 THEN DO
        SYSREASONTXT=SYSREASON" - DataSet Not Found"
   END    /* WHEN */
   WHEN SYSREASON=0025 THEN DO
        SYSREASONTXT=SYSREASON" - DataSet Migrated to Non-DASD Device"
   END    /* WHEN */
   WHEN SYSREASON=0026 THEN DO
        SYSREASONTXT=SYSREASON" - DataSet On Mass Storage Device (MSS)"
   END    /* WHEN */
   WHEN SYSREASON=0027 THEN DO
        SYSREASONTXT=SYSREASON" - No Volume Serial is Allocated to the DataSet"
   END    /* WHEN */
   WHEN SYSREASON=0028 THEN DO
        SYSREASONTXT=SYSREASON" - The DDName Must be 1-8 Characters"
   END    /* WHEN */
   WHEN SYSREASON=0029 THEN DO
        SYSREASONTXT=SYSREASON" - DataSet Name or DDName Must be Specified"
   END    /* WHEN */
   WHEN SYSREASON=0030 THEN DO
        SYSREASONTXT=SYSREASON" - DataSet is not SMS Managed"
   END    /* WHEN */
   WHEN SYSREASON=0031 THEN DO
        SYSREASONTXT=SYSREASON" - ISITMGD Macro Problem - See SYSMSGLVL2"
   END    /* WHEN */
   WHEN SYSREASON=0032 THEN DO
        SYSREASONTXT=SYSREASON" - Unable to Retrieve SMS Info - SMS/MVS LEVEL"
   END    /* WHEN */
   WHEN SYSREASON=0033 THEN DO
        SYSREASONTXT=SYSREASON" - Unable to Retrieve SMS Info - SMS INACTIVE"
   END    /* WHEN */
   WHEN SYSREASON=0034 THEN DO
        SYSREASONTXT=SYSREASON" - Unable to Retrieve SMS Info - OPEN ERROR"
   END    /* WHEN */
   WHEN SYSREASON=0035 THEN DO
        SYSREASONTXT=SYSREASON" - Error from SMS Internal Service - IGWFAMS"
   END    /* WHEN */
   WHEN SYSREASON=0036 THEN DO
        SYSREASONTXT=SYSREASON" - Error from SMS Service Module"
   END    /* WHEN */
   OTHERWISE
        SYSREASONTXT=SYSREASON" - Unknown SYSREASON"
END    /* SELECT */

IF RetCode > 4,
 & SYSREASON /= "0008",          /* The Dataset Does Not Reside on DASD */
 & SYSREASON /= "0019",          /* DataSet Resides on Multiple Volumes */
 & SYSREASON /= "0025" THEN DO   /* DataSet Migrated to Non-DASD Device */
   SAY "************************************************************"
   SAY "An ERROR was detected in the LISTDSI function for file" LISTDSIFile
   SAY "   The return code from LISTDSI is: " RetCode
   SAY "   The 1st message returned from LISTDSI is: " SYSMSGLVL1
   SAY "   The 2nd message returned from LISTDSI is: " SYSMSGLVL2
   SAY "   The text available for SYSREASON("SYSREASON") is:"
   SAY "      "SYSREASONTXT
   SAY "************************************************************"
   SYSMSGLVL1=""
   SYSMSGLVL2=""
   RETURN RetCode
END    /* IF */

/* ------------------------------------------------------------------------- */
/* Display all of the available information about the file.                  */
/* ------------------------------------------------------------------------- */
IF DisplayDetails = "Y" THEN DO
   SAY "  LISTDSI Information for file:"LISTDSIFile
   SAY " +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++"
   SAY "       SYSDSNAME     =" SYSDSNAME
   SAY "       SYSVOLUME     =" SYSVOLUME
   SAY "       SYSUNIT       =" SYSUNIT
   SAY "       SYSDSORG      =" SYSDSORG
   SAY "       SYSRECFM      =" SYSRECFM
   SAY "       SYSLRECL      =" SYSLRECL
   SAY "       SYSBLKSIZE    =" SYSBLKSIZE
   SAY "       SYSKEYLEN     =" SYSKEYLEN
   SAY "       SYSALLOC      =" SYSALLOC
   SAY "       SYSUSED       =" SYSUSED
   SAY "       SYSUSEDPAGES  =" SYSUSEDPAGES
   SAY "       SYSPRIMARY    =" SYSPRIMARY
   SAY "       SYSSECONDS    =" SYSSECONDS
   SAY "       SYSUNITS      =" SYSUNITS
   SAY "       SYSEXTENTS    =" SYSEXTENTS
   SAY "       SYSCREATE     =" SYSCREATE
   SAY "       SYSREFDATE    =" SYSREFDATE
   SAY "       SYSEXDATE     =" SYSEXDATE
   SAY "       SYSPASSWORD   =" SYSPASSWORD
   SAY "       SYSRACFA      =" SYSRACFA
   SAY "       SYSUPDATED    =" SYSUPDATED
   SAY "       SYSTRKSCYL    =" SYSTRKSCYL
   SAY "       SYSBLKSTRK    =" SYSBLKSTRK
   SAY "       SYSADIRBLK    =" SYSADIRBLK
   SAY "       SYSUDIRBLK    =" SYSUDIRBLK
   SAY "       SYSMEMBERS    =" SYSMEMBERS
   SAY "       SYSREASON     =" SYSREASON
   SAY "       SYSREASON TEXT=" SYSREASONTXT
   SAY "       SYSMSGLVL1    =" SYSMSGLVL1
   SAY "       SYSMSGLVL2    =" SYSMSGLVL2
   SAY "       SYSDSSMS      =" SYSDSSMS
   SAY "       SYSDATACLASS  =" SYSDATACLASS
   SAY "       SYSSTORCLASS  =" SYSSTORCLASS
   SAY "       SYSMGMTCLASS  =" SYSMGMTCLASS
   SAY " "
   SAY " +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++"
   SAY " "
END    /* IF */

IF SYSDSORG=VS THEN DO
   IF DisplayDetails = "Y" THEN DO
      SAY "The "LISTDSIFile" File is VSAM. Doing LISTCAT"
   END    /* IF */
   Z=OUTTRAP('ListCat.')
   "LISTCAT ENTRY("LISTDSIFile") ALL"
   RetCode=rc
   Z=OUTTRAP('OFF')
   IF RetCode /= 0 THEN DO
      SAY "************************************************************"
      SAY "An ERROR was detected performing LISTCAT for file: "LISTDSIFile
      SAY "   The return code from LISTCAT is: " RetCode
      SAY "************************************************************"
   END    /* IF */
   IF ListCat.0 <= 0 THEN DO
      SAY "************************************************************"
      SAY "No data in the ListCat STEM"
      SAY "   The number of entries in the ListCat STEM is: " ListCat.0
      SAY "************************************************************"
   END    /* IF */
END    /* IF */
ELSE DO
   RETURN RetCode
END    /* ELSE */

IF DisplayDetails = "Y" THEN DO
   SAY "   The number of entries in the ListCat STEM is: " ListCat.0
END    /* IF */

ClusterFlag="N";DataFlag="N";IndexFlag="N";z=1;AssocStem.0=0
SYSDataVols="";SYSIndexVols=""
/* ------------------------------------------------------------------------- */
/* Collect all of the available information about the file.                  */
/* ------------------------------------------------------------------------- */
IF RetCode=0 & ListCat.0 > 0 THEN
   DO y=1 TO ListCat.0
      PARSE VAR ListCat.y X1 X2 X3 X4 .
            SELECT
              WHEN p1 = "CLUSTER" THEN DO
                   ClusterFlag="Y"
                   DataFlag="N"
                   IndexFlag="N"
                   AssocFlag="N"
                   SYSClusterName=p3
              END    /* WHEN */
              WHEN p1 = "DATA" THEN DO
                   ClusterFlag="N"
                   DataFlag="Y"
                   IndexFlag="N"
                   AssocFlag="N"
                   SYSDataName=p3
              END    /* WHEN */
              WHEN p1 = "INDEX" THEN DO
                   ClusterFlag="N"
                   DataFlag="N"
                   IndexFlag="Y"
                   AssocFlag="N"
                   SYSIndexName=p3
              END    /* WHEN */
              WHEN ClusterFlag="Y",
                 & p1="ASSOCIATIONS" THEN DO
                   ClusterFlag="N"
                   DataFlag="N"
                   IndexFlag="N"
                   AssocFlag="Y"
              END    /* WHEN */
              WHEN ClusterFlag="Y",
                 & p1="IN-CAT" THEN DO
                   SYSCatName=p3
              END    /* WHEN */
              WHEN ClusterFlag="Y",
                 & SUBSTR(p1,1,13)="DATASET-OWNER" THEN DO
                   SYSCreateDate=SUBSTR(p2,17,8)
              END    /* WHEN */
              WHEN DataFlag="Y",
                 & p1="IN-CAT" THEN DO
                   SYSDataCat=p3
              END    /* WHEN */
              WHEN DataFlag="Y",
                 & SUBSTR(p1,1,6)="KEYLEN" THEN DO
                   StartPos=LASTPOS('-',p1)+1
                   Len=LENGTH(p1)-LASTPOS('-',p1)
                   SYSDataKeyLen=SUBSTR(p1,StartPos,Len)
                   StartPos=LASTPOS('-',p2)+1
                   Len=LENGTH(p2)-LASTPOS('-',p2)
                   SYSDataAvgLrecl=SUBSTR(p2,StartPos,Len)
                   StartPos=LASTPOS('-',p4)+1
                   Len=LENGTH(p4)-LASTPOS('-',p4)
                   SYSDataCISize=SUBSTR(p4,StartPos,Len)
              END    /* WHEN */
              WHEN DataFlag="Y",
                 & SUBSTR(p1,1,3)="RKP" THEN DO
                   StartPos=LASTPOS('-',p1)+1
                   Len=LENGTH(p1)-LASTPOS('-',p1)
                   SYSDataKeyStrt=SUBSTR(p1,StartPos,Len)
                   StartPos=LASTPOS('-',p2)+1
                   Len=LENGTH(p2)-LASTPOS('-',p2)
                   SYSDataMaxLrecl=SUBSTR(p2,StartPos,Len)
                   StartPos=LASTPOS('-',p4)+1
                   Len=LENGTH(p4)-LASTPOS('-',p4)
                   SYSDataCIPerCA=SUBSTR(p4,StartPos,Len)
              END    /* WHEN */
              WHEN DataFlag="Y",
                 & SUBSTR(p1,1,9)="REC-TOTAL" THEN DO
                   StartPos=LASTPOS('-',p1)+1
                   Len=LENGTH(p1)-LASTPOS('-',p1)
                   SYSDataRecTotal=SUBSTR(p1,StartPos,Len)
                   StartPos=LASTPOS('-',p2)+1
                   Len=LENGTH(p2)-LASTPOS('-',p2)
                   SYSDataCISplits=SUBSTR(p2,StartPos,Len)
              END    /* WHEN */
              WHEN DataFlag="Y",
                 & SUBSTR(p1,1,11)="REC-DELETED" THEN DO
                   StartPos=LASTPOS('-',p2)+1
                   Len=LENGTH(p2)-LASTPOS('-',p2)
                   SYSDataCASplits=SUBSTR(p2,StartPos,Len)
                   StartPos=LASTPOS('-',p3)+1
                   Len=LENGTH(p3)-LASTPOS('-',p3)
                   SYSDataExtents=SUBSTR(p3,StartPos,Len)
              END    /* WHEN */
              WHEN DataFlag="Y",
                 & SUBSTR(p1,1,12)="REC-INSERTED" THEN DO
                   StartPos=LASTPOS('-',p2)+1
                   Len=LENGTH(p2)-LASTPOS('-',p2)
                   SYSDataCIFreeSP=SUBSTR(p2,StartPos,Len)
              END    /* WHEN */
              WHEN DataFlag="Y",
                 & SUBSTR(p1,1,11)="REC-UPDATED" THEN DO
                   StartPos=LASTPOS('-',p2)+1
                   Len=LENGTH(p2)-LASTPOS('-',p2)
                   SYSDataCAFreeSP=SUBSTR(p2,StartPos,Len)
              END    /* WHEN */
              WHEN DataFlag="Y",
                 & SUBSTR(p1,1,10)="SPACE-TYPE" THEN DO
                   StartPos=LASTPOS('-',p1)+1
                   Len=LENGTH(p1)-LASTPOS('-',p1)
                   SYSDataAllocType=SUBSTR(p1,StartPos,Len)
              END    /* WHEN */
              WHEN DataFlag="Y",
                 & SUBSTR(p1,1,9)="SPACE-PRI" THEN DO
                   StartPos=LASTPOS('-',p1)+1
                   Len=LENGTH(p1)-LASTPOS('-',p1)
                   SYSDataAllocPri=SUBSTR(p1,StartPos,Len)
              END    /* WHEN */
              WHEN DataFlag="Y",
                 & SUBSTR(p1,1,9)="SPACE-SEC" THEN DO
                   StartPos=LASTPOS('-',p1)+1
                   Len=LENGTH(p1)-LASTPOS('-',p1)
                   SYSDataAllocSec=SUBSTR(p1,StartPos,Len)
              END    /* WHEN */
              WHEN DataFlag="Y",
                 & SUBSTR(p1,1,6)="VOLSER" THEN DO
                   StartPos=LASTPOS('-',p1)+1
                   Len=LENGTH(p1)-LASTPOS('-',p1)
                   IF SYSDataVols="" THEN DO
                      SYSDataVols= SUBSTR(p1,StartPos,Len)
                   END    /* IF */
                   ELSE DO
                      SYSDataVols=SYSDataVols || "," || SUBSTR(p1,StartPos,Len)
                   END    /* ELSE */
              END    /* WHEN */
              WHEN IndexFlag="Y",
                 & p1="IN-CAT" THEN DO
                   SYSIndexCat=p3
              END    /* WHEN */
              WHEN IndexFlag="Y",
                 & SUBSTR(p1,1,6)="KEYLEN" THEN DO
                   StartPos=LASTPOS('-',p1)+1
                   Len=LENGTH(p1)-LASTPOS('-',p1)
                   SYSIndexKeyLen=SUBSTR(p1,StartPos,Len)
                   StartPos=LASTPOS('-',p2)+1
                   Len=LENGTH(p2)-LASTPOS('-',p2)
                   SYSIndexAvgLrecl=SUBSTR(p2,StartPos,Len)
                   StartPos=LASTPOS('-',p4)+1
                   Len=LENGTH(p4)-LASTPOS('-',p4)
                   SYSIndexCISize=SUBSTR(p4,StartPos,Len)
              END    /* WHEN */
              WHEN IndexFlag="Y",
                 & SUBSTR(p1,1,3)="RKP" THEN DO
                   StartPos=LASTPOS('-',p1)+1
                   Len=LENGTH(p1)-LASTPOS('-',p1)
                   SYSIndexKeyStrt=SUBSTR(p1,StartPos,Len)
                   StartPos=LASTPOS('-',p2)+1
                   Len=LENGTH(p2)-LASTPOS('-',p2)
                   SYSIndexMaxLrecl=SUBSTR(p2,StartPos,Len)
                   StartPos=LASTPOS('-',p4)+1
                   Len=LENGTH(p4)-LASTPOS('-',p4)
                   SYSIndexCIPerCA=SUBSTR(p4,StartPos,Len)
              END    /* WHEN */
              WHEN IndexFlag="Y",
                 & SUBSTR(p1,1,9)="REC-TOTAL" THEN DO
                   StartPos=LASTPOS('-',p1)+1
                   Len=LENGTH(p1)-LASTPOS('-',p1)
                   SYSIndexRecTotal=SUBSTR(p1,StartPos,Len)
                   StartPos=LASTPOS('-',p2)+1
                   Len=LENGTH(p2)-LASTPOS('-',p2)
                   SYSIndexCISplits=SUBSTR(p2,StartPos,Len)
              END    /* WHEN */
              WHEN IndexFlag="Y",
                 & SUBSTR(p1,1,11)="REC-DELETED" THEN DO
                   StartPos=LASTPOS('-',p2)+1
                   Len=LENGTH(p2)-LASTPOS('-',p2)
                   SYSIndexCASplits=SUBSTR(p2,StartPos,Len)
                   StartPos=LASTPOS('-',p3)+1
                   Len=LENGTH(p3)-LASTPOS('-',p3)
                   SYSIndexExtents=SUBSTR(p3,StartPos,Len)
                   StartPos=LASTPOS('-',p4)+1
                   Len=LENGTH(p4)-LASTPOS('-',p4)
                   SYSIndexLevels=SUBSTR(p4,StartPos,Len)
              END    /* WHEN */
              WHEN IndexFlag="Y",
                 & SUBSTR(p1,1,12)="REC-INSERTED" THEN DO
                   StartPos=LASTPOS('-',p2)+1
                   Len=LENGTH(p2)-LASTPOS('-',p2)
                   SYSIndexCIFreeSP=SUBSTR(p2,StartPos,Len)
              END    /* WHEN */
              WHEN IndexFlag="Y",
                 & SUBSTR(p1,1,11)="REC-UPDATED" THEN DO
                   StartPos=LASTPOS('-',p2)+1
                   Len=LENGTH(p2)-LASTPOS('-',p2)
                   SYSIndexCAFreeSP=SUBSTR(p2,StartPos,Len)
              END    /* WHEN */
              WHEN IndexFlag="Y",
                 & SUBSTR(p1,1,10)="SPACE-TYPE" THEN DO
                   StartPos=LASTPOS('-',p1)+1
                   Len=LENGTH(p1)-LASTPOS('-',p1)
                   SYSIndexAllocType=SUBSTR(p1,StartPos,Len)
              END    /* WHEN */
              WHEN IndexFlag="Y",
                 & SUBSTR(p1,1,9)="SPACE-PRI" THEN DO
                   StartPos=LASTPOS('-',p1)+1
                   Len=LENGTH(p1)-LASTPOS('-',p1)
                   SYSIndexAllocPri=SUBSTR(p1,StartPos,Len)
              END    /* WHEN */
              WHEN IndexFlag="Y",
                 & SUBSTR(p1,1,9)="SPACE-SEC" THEN DO
                   StartPos=LASTPOS('-',p1)+1
                   Len=LENGTH(p1)-LASTPOS('-',p1)
                   SYSIndexAllocSec=SUBSTR(p1,StartPos,Len)
              END    /* WHEN */
              WHEN IndexFlag="Y",
                 & SUBSTR(p1,1,6)="VOLSER" THEN DO
                   StartPos=LASTPOS('-',p1)+1
                   Len=LENGTH(p1)-LASTPOS('-',p1)
                   IF SYSIndexVols="" THEN DO
                      SYSIndexVols= SUBSTR(p1,StartPos,Len)
                   END    /* IF */
                   ELSE DO
                      SYSIndexVols=SYSIndexVols || ",",
                                  || SUBSTR(p1,StartPos,Len)
                   END    /* ELSE */
              END    /* WHEN */
              WHEN AssocFlag="Y" THEN DO
                   AssocStem.z=p1
                   AssocStem.0=z
                   z=z+1
              END    /* WHEN */
              OTHERWISE
                   ITERATE
   END    /* SELECT */
END    /* IF */

/* ------------------------------------------------------------------------- */
/* Display all of the available information about the VSAM File.             */
/* ------------------------------------------------------------------------- */
IF DisplayDetails = "Y" THEN DO
   SAY "  LISTCAT Information for file:"LISTDSIFile
   SAY " +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++"
   SAY "       Cluster Name             =" SYSClusterName
   SAY "       Cluster Catalog          =" SYSCatName
   SAY "       Cluster Create Date      =" SYSCreateDate
   SAY "       Cluster Associations:"
   IF AssocStem.0 <=0 THEN DO
      AssocStem.1="No Associations Found"
      AssocStem.0=1
   END    /* IF */
   DO z=1 TO AssocStem.0
      SAY "                                  "AssocStem.z
   END    /* DO */
   SAY " "
   SAY "       Data Segment Name        =" SYSDataName
   SAY "       Data Segment Catalog     =" SYSDataCat
   SAY "       Data Segment Volume      =" SYSDataVols
   SAY "       Data Segment Key Length  =" SYSDataKeyLen
   SAY "       Data Segment Key Pos     =" SYSDataKeyStrt
   SAY "       Data Segment Avg LRECL   =" SYSDataAvgLrecl
   SAY "       Data Segment Max Lrecl   =" SYSDataMaxLrecl
   SAY "       Data Segment CI Size     =" SYSDataCISize
   SAY "       Data Segment CI per CA   =" SYSDataCIPerCA
   SAY "       Data Segment Total Recs  =" SYSDataRecTotal
   SAY "       Data Segment CI Splits   =" SYSDataCISplits
   SAY "       Data Segment CI FreeSP   =" SYSDataCIFreeSP"%"
   SAY "       Data Segment CA Splits   =" SYSDataCASplits
   SAY "       Data Segment CA FreeSP   =" SYSDataCAFreeSP"%"
   SAY "       Data Segment Extents     =" SYSDataExtents
   SAY "       Data Segment Alloc Units =" SYSDataAllocType
   SAY "       Data Segment Primary     =" SYSDataAllocPri
   SAY "       Data Segment Secondary   =" SYSDataAllocSec
   SAY " "
   SAY "       Index Segment Name       =" SYSIndexName
   SAY "       Index Segment Catalog    =" SYSIndexCat
   SAY "       Index Segment Volume     =" SYSIndexVols
   SAY "       Index Segment Key Length =" SYSIndexKeyLen
   SAY "       Index Segment Key Pos    =" SYSIndexKeyStrt
   SAY "       Index Segment Avg LRECL  =" SYSIndexAvgLrecl
   SAY "       Index Segment Max Lrecl  =" SYSIndexMaxLrecl
   SAY "       Index Segment CI Size    =" SYSIndexCISize
   SAY "       Index Segment CI per CA  =" SYSIndexCIPerCA
   SAY "       Index Segment Total Recs =" SYSIndexRecTotal
   SAY "       Index Segment CI Splits  =" SYSIndexCISplits
   SAY "       Index Segment CI FreeSP  =" SYSIndexCIFreeSP"%"
   SAY "       Index Segment CA Splits  =" SYSIndexCASplits
   SAY "       Index Segment CA FreeSP  =" SYSIndexCAFreeSP"%"
   SAY "       Index Segment Extents    =" SYSIndexExtents
   SAY "       Index Segment Levels     =" SYSIndexLevels
   SAY "       Index Segment Alloc Units=" SYSIndexAllocType
   SAY "       Index Segment Primary    =" SYSIndexAllocPri
   SAY "       Index Segment Secondary  =" SYSIndexAllocSec
   SAY " "
END    /* IF */

RETURN RetCode

