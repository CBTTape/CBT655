/* --------------------------------- REXX ---------------------------------- */
/*  CATCLJCL Exec      THIS IS A UTILITY EXEC                                */
/* ------------------------------------------------------------------------- */
/* Author: David G. Kopischke                                                */
/* Notes:  Catalog Scan REXX EXEC.                                           */
/* Usage:  This software may be distributed freely to anyone. You may not    */
/*         sell this software nor package it with software that is sold for  */
/*         profit.                                                           */
/* ------------------------------------------------------------------------- */
/* REXX EXEC to create JCL to run the catalog clear process.                 */
/*                                                                           */
/* ------------------------------------------------------------------------- */
/* Function: Collect names of every user catalog attached to the master      */
/*           catalog. Create JCL to run the catalog clear process on each    */
/*           of the individual user catalogs.                                */
/*                                                                           */
/* ------------------------------------------------------------------------- */
/* *************************** REVISION HISTORY **************************** */
/* ACID  +   DATE   + Change Description                                     */
/* ------+----------+------------------------------------------------------- */
/* TSDGK +05/22/2000+ Initial Version                                        */
/* ------+----------+------------------------------------------------------- */
/*       +          +                                                        */
/* ------+----------+------------------------------------------------------- */

PARSE UPPER ARG MastrCat Trace .

IF Trace="Y" THEN DO
   SAY " !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!! "
   SAY " !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!! "
   SAY " "
   SAY "                            TRACING IS ON "
   SAY " "
   SAY " !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!! "
   SAY " !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!! "
   SAY " "
   TRACE ?I                                  /* Turn Tracing ON              */
 /*TRACE ?R */                               /* Turn Tracing ON              */
END  /* IF */

SAY "Master Catalog Name="MastrCat
SAY " "
MaxRC=0

/* ------------------------------------------------------------------------- */
/* Collect the name of every User Catalog attached to the Master Catalog.    */
/* ------------------------------------------------------------------------- */
"PROFILE NOPREFIX"
Z=OUTTRAP('CatList.')
"LISTCAT CATALOG('"MastrCat"') USERCATALOG ALL" /* Collect the names of all   */
                                                /* User Catalogs.             */
RetCode=rc
Z=OUTTRAP('OFF')
IF RetCode \= 0 THEN DO
   SAY "************************************************************"
   SAY "An ERROR was detected performing LISTCAT on the Master Catalog"
   SAY "   The return code from LISTCAT is: " RetCode
   SAY "************************************************************"
   SAY "   The number of entries in the CatList STEM is: "CatList.0
   SAY "   The entries in the CatList STEM are:"
   SAY " "
   DO i=1 TO CatList.0
      SAY "STEM Entry: "i "      Data: "CatList.i
      IF i>10000 THEN DO
         i=CatList.0
      END  /* IF */
   END  /* DO */
   SAY "************************************************************"
   MaxRC=12
   SIGNAL EXIT
END  /* IF */
IF CatList.0 <= 0 THEN DO
   SAY "************************************************************"
   SAY "No User Catalogs were extracted by LISTCAT"
   SAY "   The number of entries in the Catalog STEM is: " CatList.0
   SAY "************************************************************"
   MaxRC=12
   SIGNAL EXIT
END  /* IF */

/* ------------------------------------------------------------------------- */
/* Get more information about the master catalog.                            */
/* ------------------------------------------------------------------------- */
RetCode=File_LISTDSI(MastrCat)
IF RetCode /= 0 THEN DO
   SAY "************************************************************"
   SAY "An Error was encountered in LISTDSI processing on the "MastrCat
   SAY "   file. The return code from the function call is: "RetCode
   SAY "************************************************************"
   MaxRC=12
   SIGNAL EXIT
END    /* IF */

/* ------------------------------------------------------------------------- */
/* Extract necessary lines from the STEM and save in a new STEM.             */
/* ------------------------------------------------------------------------- */
UserCatList.1=MastrCat SYSVOLUME
j=1
DO i=1 TO CatList.0
   PARSE VAR CatList.i p1 p2 p3 .
   SELECT
     WHEN p1 = "USERCATALOG" THEN DO          /* Save the User Catalog Name  */
          UserCatName=p3
     END  /* WHEN */
     WHEN SUBSTR(p1,1,6) = "VOLSER" THEN DO
          j=j+1
          UserCatList.j=UserCatName,          /* Store cat name and volser   */
                        SUBSTR(p1,19,6)
     END  /* WHEN */
     OTHERWISE
          ITERATE
   END  /* SELECT */
END  /* DO */
UserCatList.0=j

/* ------------------------------------------------------------------------- */
/* DROP CatList STEM to free up some storage.                                */
/* ------------------------------------------------------------------------- */
DROP CatList.

/* ------------------------------------------------------------------------- */
/* Display information about the catalog processing done so far.             */
/* ------------------------------------------------------------------------- */
SAY " "
SAY "There are "UserCatList.0" entries in the User Catalog STEM"
SAY " "
SAY "These are all of the catalogs found:"
SAY "=================================================================="
DO i=1 TO UserCatList.0
   PARSE VAR UserCatList.i UserCatName UserCatVol
   SAY "STEM Entry: "RIGHT(i,3," "),
       "   Catalog Name: "LEFT(UserCatName,20," "),
       "   Catalog Vol Ser: "UserCatVol
END  /* DO */
SAY "=================================================================="
SAY " "

/* ------------------------------------------------------------------------- */
/* Build JCL to Execute CATCLR EXEC on each of the individual User Catalogs. */
/* ------------------------------------------------------------------------- */
JCL.=""
x=0
x=x+1;JCL.x="//???????? JOB (00000),'CATALOG CLEAR JOBS',"
x=x+1;JCL.x="//             MSGCLASS=R,"
x=x+1;JCL.x="//             CLASS=K,"
x=x+1;JCL.x="//             REGION=5M,"
x=x+1;JCL.x="//             NOTIFY=&SYSUID"
x=x+1;JCL.x="//*"
x=x+1;JCL.x="//*****************************************************//"
x=x+1;JCL.x="//* Author: David G. Kopischke                        *//"
x=x+1;JCL.x="//* Notes: JCL to run catalog clear REXX EXEC.        *//"
x=x+1;JCL.x="//* Usage: This JOB and all related software may be   *//"
x=x+1;JCL.x="//*        distributed freely to anyone. You may not  *//"
x=x+1;JCL.x="//*        sell this software nor package it with     *//"
x=x+1;JCL.x="//*        software that is sold for profit.          *//"
x=x+1;JCL.x="//* PROPERTY OF OPPENHEIMRFUNDS, INC.                 *//"
x=x+1;JCL.x="//* COPYRIGHT OPPENHEIMERFUNDS, INC. 2003             *//"
x=x+1;JCL.x="//*****************************************************//"
x=x+1;JCL.x="//*"
x=x+1;JCL.x="//* ------------------------------------------------- *//"
x=x+1;JCL.x="//* CREATE THE JCL LIBRARY                            *//"
x=x+1;JCL.x="//* ------------------------------------------------- *//"
/* ------------------------------------------------------------------------- */
/* Create the JCL Library                                                    */
/* ------------------------------------------------------------------------- */
x=x+1;JCL.x="//CREATE  EXEC PGM=IEBGENER"
x=x+1;JCL.x="//SYSPRINT DD  SYSOUT=*"
x=x+1;JCL.x="//SYSIN    DD  DUMMY"
x=x+1;JCL.x="//SYSUT1   DD  DUMMY,DCB=(DSORG=PO,LRECL=80,BLKSIZE=480)"
x=x+1;JCL.x="//SYSUT2   DD  DSN=???.?????.JCL.CATCLEAR($DUMMY),"
x=x+1;JCL.x="//             DISP=(,CATLG,DELETE),"
x=x+1;JCL.x="//             UNIT=SYSDA,"
x=x+1;JCL.x="//             SPACE=(TRK,(15,15,45))"
x=x+1;JCL.x="//* ------------------------------------------------- *//"
/* ------------------------------------------------------------------------- */
/* Create the JCL Library and load it.                                       */
/* ------------------------------------------------------------------------- */
x=x+1;JCL.x="//ADDEMALL EXEC PGM=IEBUPDTE,PARM=MOD"
x=x+1;JCL.x="//SYSPRINT DD  SYSOUT=*"
x=x+1;JCL.x="//SYSUT1   DD  DSNAME=???.?????.JCL.CATCLEAR,"
x=x+1;JCL.x="//             DISP=OLD"
x=x+1;JCL.x="//SYSUT2   DD  DSNAME=???.?????.JCL.CATCLEAR,"
x=x+1;JCL.x="//             DISP=OLD"
x=x+1;JCL.x="//SYSIN    DD  DATA"
/* ------------------------------------------------------------------------- */
/*  Create CATCLR1 PROC for scanning and building IDCAMS DELETE Statements   */
/*  for files that are cataloged but not present on the volume it is         */
/*  cataloged to.                                                            */
/* ------------------------------------------------------------------------- */
x=x+1;JCL.x="./        ADD   LIST=ALL,NAME=CATCLR1,LEVEL=01,SOURCE=0"
x=x+1;JCL.x="./     NUMBER   NEW1=10,INCR=10"
x=x+1;JCL.x="//CATCLR1 PROC TYPE=,"
x=x+1;JCL.x="//             USERCAT=,"
x=x+1;JCL.x="//             VOL=,"
x=x+1;JCL.x="//             DETAILS='N',"
x=x+1;JCL.x="//             TRACE='N',"
x=x+1;JCL.x="//*            USERID=,"
x=x+1;JCL.x="//             SOUT='R,HOLD=YES'"
x=x+1;JCL.x="//*"
x=x+1;JCL.x="//* ------------------------------------------------- *//"
x=x+1;JCL.x="//* EXECUTE CATCLEAR REXX EXEC TO IDENTIFY FILES THAT *//"
x=x+1;JCL.x="//* ARE CATALOGED BUT NOT ON THE VOLUME.              *//"
x=x+1;JCL.x="//* ------------------------------------------------- *//"
x=x+1;JCL.x="//TSOBATCH EXEC PGM=IKJEFT01,DYNAMNBR=99,"
x=x+1;JCL.x="// PARM='%CATCLR3 &TYPE &USERCAT &VOL &DETAILS &TRACE'"
x=x+1;JCL.x="//ISPLOG   DD  UNIT=SYSDA,SPACE=(CYL,(1,1))"
x=x+1;JCL.x="//SYSPROC  DD  DSN=????.ISPF.ISPCLIB,DISP=SHR"
x=x+1;JCL.x="//         DD  DSN=????.LCLMODS.ISPCLIB,DISP=SHR"
x=x+1;JCL.x="//ISPLLIB  DD  DSN=SYS1.LINKLIB,DISP=SHR"
x=x+1;JCL.x="//SYSLBC   DD  DSN=SYS1.BRODCAST,DISP=SHR"
x=x+1;JCL.x="//SYSUADS  DD  DSN=SYS1.UADS,DISP=SHR"
x=x+1;JCL.x="//SYSTERM  DD  TERM=TS,SYSOUT=&SOUT"
x=x+1;JCL.x="//SYSIN    DD  TERM=TS,SYSOUT=&SOUT"
x=x+1;JCL.x="//SYSTSPRT DD  SYSOUT=&SOUT"
x=x+1;JCL.x="//SYSTSIN  DD  DUMMY"
x=x+1;JCL.x="//*"

/* ------------------------------------------------------------------------- */
/* Step through the User Catalog STEM and build JCL to execute the Catalog   */
/* Clear REXX Exec against each user catalog found (including the master).   */
/* ------------------------------------------------------------------------- */
DO i=1 TO UserCatList.0
   PARSE VAR UserCatList.i UserCatName UserCatVol
   StartPos=LASTPOS('.',UserCatName)+1
   Len=LENGTH(UserCatName)-StartPos+1
   CatShortName=SUBSTR(UserCatName,StartPos,Len)
   x=x+1;JCL.x="./        ADD   LIST=ALL,NAME="||,
               CatShortName","||,
               "LEVEL=01,SOURCE=0"
   x=x+1;JCL.x="./     NUMBER   NEW1=10,INCR=10"
   x=x+1;JCL.x="//?????"RIGHT(i,3,"0")" JOB (070000),'CAT CLR - "||,
               CatShortName"',"
   x=x+1;JCL.x="//             MSGCLASS=R,"
   x=x+1;JCL.x="//             CLASS=K,"
   x=x+1;JCL.x="//             REGION=5M,"
   x=x+1;JCL.x="//             NOTIFY=&SYSUID"
   x=x+1;JCL.x="//*"
   x=x+1;JCL.x="//PROCLIB JCLLIB ORDER=???.?????.JCL.CATCLEAR"
   x=x+1;JCL.x="//*"
   x=x+1;JCL.x="//CATCLEAR EXEC CATCLR1,"
   x=x+1;JCL.x="//         TYPE=T,             <== D = DELETES, T = LISTCATS"
   x=x+1;JCL.x="//*        USERCAT='????'      <== CATALOG NAME"
   x=x+1;JCL.x="//         USERCAT='"UserCatName"',"
   x=x+1;JCL.x="//* ------------------------------------------------- *//"
   x=x+1;JCL.x="//* THE VOL PARAMETER IS INTENDED TO ALLOW YOU TO     *//"
   x=x+1;JCL.x="//* TARGET SPECIFIC VOLUMES TO DELETE FILES FROM.     *//"
   x=x+1;JCL.x="//* THIS DOES NOT WORK YET.                           *//"
   x=x+1;JCL.x="//* ------------------------------------------------- *//"
   x=x+1;JCL.x="//         VOL='WRK',          <== VOLUME(S) TO TARGET"
   x=x+1;JCL.x="//* ------------------------------------------------- *//"
   x=x+1;JCL.x="//* IF YOU CHANGE DETAILS TO Y, YOU WILL GET INFO ON  *//"
   x=x+1;JCL.x="//* EVERY FILE FOUND IN THE CATALOG. COULD BE LOTS OF *//"
   x=x+1;JCL.x="//* OUTPUT.                                           *//"
   x=x+1;JCL.x="//* ------------------------------------------------- *//"
   x=x+1;JCL.x="//         DETAILS='N',        <== REPORT DISPLAYS DETAILS"
   x=x+1;JCL.x="//* ------------------------------------------------- *//"
   x=x+1;JCL.x="//* IF YOU CHANGE TRACE TO Y, YOU WILL INVOKE AN      *//"
   x=x+1;JCL.x="//* INTERMEDIATE TRACE AT THE START OF THE EXEC.      *//"
   x=x+1;JCL.x="//* COULD BE LOTS OF OUTPUT.                          *//"
   x=x+1;JCL.x="//* ------------------------------------------------- *//"
   x=x+1;JCL.x="//         TRACE='N',          <== TRACE THE EXEC"
   x=x+1;JCL.x="//         SOUT='R,FREE=CLOSE' <== REPORT OUTPUT PARMS"
   x=x+1;JCL.x="//*"
END  /* DO */

/* ------------------------------------------------------------------------- */
/*  Add the IEBUPDTE Delimiter as the last item in the JCL STEM.             */
/* ------------------------------------------------------------------------- */
x=x+1;JCL.x="/*"

/* ------------------------------------------------------------------------- */
/*  Dump the STEM to a Dataset that contains the JCL to do it all.           */
/* ------------------------------------------------------------------------- */

"EXECIO * DISKW JCLOUT(FINIS STEM JCL."
MaxRC=MAX(rc,MaxRC)

EXIT:
IF MaxRC > 4 THEN rc=MaxRC
ELSE rc=0
EXIT rc

/* ------------------------------------------------------------------------- */
/* File_LISTDSI function                                                     */
/* This function receives a file name in the call and displays information   */
/* about that file.                                                          */
/* ------------------------------------------------------------------------- */
File_LISTDSI:
ARG LISTDSIFile

/* ------------------------------------------------------------------------- */
/* Determine if the file name passed includes a PDS member in the name.      */
/* ------------------------------------------------------------------------- */
PDSIndicator=INDEX(LISTDSIFile,"(",1)
IF PDSIndicator > 0 THEN DO
   LISTDSIFile=SUBSTR(LISTDSIFile,1,PDSIndicator-1)
END    /* IF */

/* ------------------------------------------------------------------------- */
/* Determine if the file name passed includes a PDS member in the name.      */
/* ------------------------------------------------------------------------- */
LISTDSIFile="'" || LISTDSIFile || "'"
IF DisplayDetails = "Y" THEN DO
   SAY "The LISTDSI File Name Parsed is: " LISTDSIFile
END    /* IF */

/* ------------------------------------------------------------------------- */
/* If the file was determined to be a PDS, include directory information.    */
/* ------------------------------------------------------------------------- */
IF PDSIndicator > 0 THEN DO
   RetCode=LISTDSI(LISTDSIFile "DIRECTORY")
END    /* IF */
ELSE DO
   RetCode=LISTDSI(LISTDSIFile)
END    /* ELSE */

/* ------------------------------------------------------------------------- */
/* Associate meaningful text to the SYSREASON code returned from LISTDSI.    */
/* ------------------------------------------------------------------------- */
SELECT
   WHEN SYSREASON=0000 THEN DO
        SYSREASONTXT=""
   END    /* WHEN */
   WHEN SYSREASON="" THEN DO
        SYSREASONTXT=""
   END    /* WHEN */
   WHEN SYSREASON=0001 THEN DO
        SYSREASONTXT=SYSREASON" - Error Parsing the Function"
   END    /* WHEN */
   WHEN SYSREASON=0002 THEN DO
        SYSREASONTXT=SYSREASON" - Dynamic Allocation Processing Error"
   END    /* WHEN */
   WHEN SYSREASON=0003 THEN DO
        SYSREASONTXT=SYSREASON" - DataSet is a Type That Cannot Be Processed"
   END    /* WHEN */
   WHEN SYSREASON=0004 THEN DO
        SYSREASONTXT=SYSREASON" - Error Determining UNIT Name"
   END    /* WHEN */
   WHEN SYSREASON=0005 THEN DO
        SYSREASONTXT=SYSREASON" - DataSet Not Cataloged"
   END    /* WHEN */
   WHEN SYSREASON=0006 THEN DO
        SYSREASONTXT=SYSREASON" - Error Obtaining the DataSet Name"
   END    /* WHEN */
   WHEN SYSREASON=0007 THEN DO
        SYSREASONTXT=SYSREASON" - Error Finding the Device Type"
   END    /* WHEN */
   WHEN SYSREASON=0008 THEN DO
        SYSREASONTXT=SYSREASON" - The Dataset Does Not Reside on DASD"
   END    /* WHEN */
   WHEN SYSREASON=0009 THEN DO
        SYSREASONTXT=SYSREASON" - DFHSM Migrated the DataSet - NORECALL"
   END    /* WHEN */
   WHEN SYSREASON=0011 THEN DO
        SYSREASONTXT=SYSREASON" - Directory Information requested - Denied"
   END    /* WHEN */
   WHEN SYSREASON=0012 THEN DO
        SYSREASONTXT=SYSREASON" - VSAM DataSets are Not Supported"
   END    /* WHEN */
   WHEN SYSREASON=0013 THEN DO
        SYSREASONTXT=SYSREASON" - The DataSet Could Not Be Opened"
   END    /* WHEN */
   WHEN SYSREASON=0014 THEN DO
        SYSREASONTXT=SYSREASON" - Device Type Not Found in UCB Tables"
   END    /* WHEN */
   WHEN SYSREASON=0017 THEN DO
        SYSREASONTXT=SYSREASON" - System or User Abend Occurred"
   END    /* WHEN */
   WHEN SYSREASON=0018 THEN DO
        SYSREASONTXT=SYSREASON" - Partial DataSet Information Obtained"
   END    /* WHEN */
   WHEN SYSREASON=0019 THEN DO
        SYSREASONTXT=SYSREASON" - DataSet Resides on Multiple Volumes"
   END    /* WHEN */
   WHEN SYSREASON=0020 THEN DO
        SYSREASONTXT=SYSREASON" - Device Type Not Found in Eligible Dev Tab"
   END    /* WHEN */
   WHEN SYSREASON=0021 THEN DO
        SYSREASONTXT=SYSREASON" - Catalog Error Trying to Locate DataSet"
   END    /* WHEN */
   WHEN SYSREASON=0022 THEN DO
        SYSREASONTXT=SYSREASON" - Volume Not Mounted"
   END    /* WHEN */
   WHEN SYSREASON=0023 THEN DO
        SYSREASONTXT=SYSREASON" - Permanent I/O Error on Volume"
   END    /* WHEN */
   WHEN SYSREASON=0024 THEN DO
        SYSREASONTXT=SYSREASON" - DataSet Not Found"
   END    /* WHEN */
   WHEN SYSREASON=0025 THEN DO
        SYSREASONTXT=SYSREASON" - DataSet Migrated to Non-DASD Device"
   END    /* WHEN */
   WHEN SYSREASON=0026 THEN DO
        SYSREASONTXT=SYSREASON" - DataSet On Mass Storage Device (MSS)"
   END    /* WHEN */
   WHEN SYSREASON=0027 THEN DO
        SYSREASONTXT=SYSREASON" - No Volume Serial is Allocated to the DataSet"
   END    /* WHEN */
   WHEN SYSREASON=0028 THEN DO
        SYSREASONTXT=SYSREASON" - The DDName Must be 1-8 Characters"
   END    /* WHEN */
   WHEN SYSREASON=0029 THEN DO
        SYSREASONTXT=SYSREASON" - DataSet Name or DDName Must be Specified"
   END    /* WHEN */
   WHEN SYSREASON=0030 THEN DO
        SYSREASONTXT=SYSREASON" - DataSet is not SMS Managed"
   END    /* WHEN */
   WHEN SYSREASON=0031 THEN DO
        SYSREASONTXT=SYSREASON" - ISITMGD Macro Problem - See SYSMSGLVL2"
   END    /* WHEN */
   WHEN SYSREASON=0032 THEN DO
        SYSREASONTXT=SYSREASON" - Unable to Retrieve SMS Info - SMS/MVS LEVEL"
   END    /* WHEN */
   WHEN SYSREASON=0033 THEN DO
        SYSREASONTXT=SYSREASON" - Unable to Retrieve SMS Info - SMS INACTIVE"
   END    /* WHEN */
   WHEN SYSREASON=0034 THEN DO
        SYSREASONTXT=SYSREASON" - Unable to Retrieve SMS Info - OPEN ERROR"
   END    /* WHEN */
   WHEN SYSREASON=0035 THEN DO
        SYSREASONTXT=SYSREASON" - Error from SMS Internal Service - IGWFAMS"
   END    /* WHEN */
   WHEN SYSREASON=0036 THEN DO
        SYSREASONTXT=SYSREASON" - Error from SMS Service Module"
   END    /* WHEN */
   OTHERWISE
        SYSREASONTXT=SYSREASON" - Unknown SYSREASON"
END    /* SELECT */

IF RetCode > 4,
 & SYSREASON /= "0008",
 & SYSREASON /= "0025" THEN DO
   SAY "************************************************************"
   SAY "An ERROR was detected in the LISTDSI function for file" LISTDSIFile
   SAY "   The return code from LISTDSI is: " RetCode
   SAY "   The 1st message returned from LISTDSI is: " SYSMSGLVL1
   SAY "   The 2nd message returned from LISTDSI is: " SYSMSGLVL2
   SAY "   The text available for SYSREASON("SYSREASON") is:"
   SAY "      "SYSREASONTXT
   SAY "************************************************************"
   SYSMSGLVL1=""
   SYSMSGLVL2=""
   RETURN RetCode
END    /* IF */

/* ------------------------------------------------------------------------- */
/* Display all of the available information about the file.                  */
/* ------------------------------------------------------------------------- */
IF DisplayDetails = "Y" THEN DO
   SAY "  LISTDSI Information for file:"LISTDSIFile
   SAY " +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++"
   SAY "       SYSDSNAME     =" SYSDSNAME
   SAY "       SYSVOLUME     =" SYSVOLUME
   SAY "       SYSUNIT       =" SYSUNIT
   SAY "       SYSDSORG      =" SYSDSORG
   SAY "       SYSRECFM      =" SYSRECFM
   SAY "       SYSLRECL      =" SYSLRECL
   SAY "       SYSBLKSIZE    =" SYSBLKSIZE
   SAY "       SYSKEYLEN     =" SYSKEYLEN
   SAY "       SYSALLOC      =" SYSALLOC
   SAY "       SYSUSED       =" SYSUSED
   SAY "       SYSUSEDPAGES  =" SYSUSEDPAGES
   SAY "       SYSPRIMARY    =" SYSPRIMARY
   SAY "       SYSSECONDS    =" SYSSECONDS
   SAY "       SYSUNITS      =" SYSUNITS
   SAY "       SYSEXTENTS    =" SYSEXTENTS
   SAY "       SYSCREATE     =" SYSCREATE
   SAY "       SYSREFDATE    =" SYSREFDATE
   SAY "       SYSEXDATE     =" SYSEXDATE
   SAY "       SYSPASSWORD   =" SYSPASSWORD
   SAY "       SYSRACFA      =" SYSRACFA
   SAY "       SYSUPDATED    =" SYSUPDATED
   SAY "       SYSTRKSCYL    =" SYSTRKSCYL
   SAY "       SYSBLKSTRK    =" SYSBLKSTRK
   SAY "       SYSADIRBLK    =" SYSADIRBLK
   SAY "       SYSUDIRBLK    =" SYSUDIRBLK
   SAY "       SYSMEMBERS    =" SYSMEMBERS
   SAY "       SYSREASON     =" SYSREASON
   SAY "       SYSREASON TEXT=" SYSREASONTXT
   SAY "       SYSMSGLVL1    =" SYSMSGLVL1
   SAY "       SYSMSGLVL2    =" SYSMSGLVL2
   SAY "       SYSDSSMS      =" SYSDSSMS
   SAY "       SYSDATACLASS  =" SYSDATACLASS
   SAY "       SYSSTORCLASS  =" SYSSTORCLASS
   SAY "       SYSMGMTCLASS  =" SYSMGMTCLASS
   SAY " "
   SAY " +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++"
   SAY " "
END    /* IF */

IF SYSDSORG=VS THEN DO
   IF DisplayDetails = "Y" THEN DO
      SAY "The "LISTDSIFile" File is VSAM. Doing LISTCAT"
   END    /* IF */
   Z=OUTTRAP('ListCat.')
   "LISTCAT ENTRY("LISTDSIFile") ALL"
   RetCode=rc
   Z=OUTTRAP('OFF')
   IF RetCode /= 0 THEN DO
      SAY "************************************************************"
      SAY "An ERROR was detected performing LISTCAT for file: "LISTDSIFile
      SAY "   The return code from LISTCAT is: " RetCode
      SAY "************************************************************"
   END    /* IF */
   IF ListCat.0 <= 0 THEN DO
      SAY "************************************************************"
      SAY "No data in the ListCat STEM"
      SAY "   The number of entries in the ListCat STEM is: " ListCat.0
      SAY "************************************************************"
   END    /* IF */
END    /* IF */
ELSE DO
   RETURN RetCode
END    /* ELSE */

IF DisplayDetails = "Y" THEN DO
   SAY "   The number of entries in the ListCat STEM is: " ListCat.0
END    /* IF */

ClusterFlag="N";DataFlag="N";IndexFlag="N";z=1;AssocStem.0=0
SYSDataVols="";SYSIndexVols=""
/* ------------------------------------------------------------------------- */
/* Collect all of the available information about the file.                  */
/* ------------------------------------------------------------------------- */
IF RetCode=0 & ListCat.0 > 0 THEN
   DO y=1 TO ListCat.0
      PARSE VAR ListCat.y p1 p2 p3 p4 .
            SELECT
              WHEN p1 = "CLUSTER" THEN DO
                   ClusterFlag="Y"
                   DataFlag="N"
                   IndexFlag="N"
                   AssocFlag="N"
                   SYSClusterName=p3
              END    /* WHEN */
              WHEN p1 = "DATA" THEN DO
                   ClusterFlag="N"
                   DataFlag="Y"
                   IndexFlag="N"
                   AssocFlag="N"
                   SYSDataName=p3
              END    /* WHEN */
              WHEN p1 = "INDEX" THEN DO
                   ClusterFlag="N"
                   DataFlag="N"
                   IndexFlag="Y"
                   AssocFlag="N"
                   SYSIndexName=p3
              END    /* WHEN */
              WHEN ClusterFlag="Y",
                 & p1="ASSOCIATIONS" THEN DO
                   ClusterFlag="N"
                   DataFlag="N"
                   IndexFlag="N"
                   AssocFlag="Y"
              END    /* WHEN */
              WHEN ClusterFlag="Y",
                 & p1="IN-CAT" THEN DO
                   SYSCatName=p3
              END    /* WHEN */
              WHEN ClusterFlag="Y",
                 & SUBSTR(p1,1,13)="DATASET-OWNER" THEN DO
                   SYSCreateDate=SUBSTR(p2,17,8)
              END    /* WHEN */
              WHEN DataFlag="Y",
                 & p1="IN-CAT" THEN DO
                   SYSDataCat=p3
              END    /* WHEN */
              WHEN DataFlag="Y",
                 & SUBSTR(p1,1,6)="KEYLEN" THEN DO
                   StartPos=LASTPOS('-',p1)+1
                   Len=LENGTH(p1)-LASTPOS('-',p1)
                   SYSDataKeyLen=SUBSTR(p1,StartPos,Len)
                   StartPos=LASTPOS('-',p2)+1
                   Len=LENGTH(p2)-LASTPOS('-',p2)
                   SYSDataAvgLrecl=SUBSTR(p2,StartPos,Len)
                   StartPos=LASTPOS('-',p4)+1
                   Len=LENGTH(p4)-LASTPOS('-',p4)
                   SYSDataCISize=SUBSTR(p4,StartPos,Len)
              END    /* WHEN */
              WHEN DataFlag="Y",
                 & SUBSTR(p1,1,3)="RKP" THEN DO
                   StartPos=LASTPOS('-',p1)+1
                   Len=LENGTH(p1)-LASTPOS('-',p1)
                   SYSDataKeyStrt=SUBSTR(p1,StartPos,Len)
                   StartPos=LASTPOS('-',p2)+1
                   Len=LENGTH(p2)-LASTPOS('-',p2)
                   SYSDataMaxLrecl=SUBSTR(p2,StartPos,Len)
                   StartPos=LASTPOS('-',p4)+1
                   Len=LENGTH(p4)-LASTPOS('-',p4)
                   SYSDataCIPerCA=SUBSTR(p4,StartPos,Len)
              END    /* WHEN */
              WHEN DataFlag="Y",
                 & SUBSTR(p1,1,9)="REC-TOTAL" THEN DO
                   StartPos=LASTPOS('-',p1)+1
                   Len=LENGTH(p1)-LASTPOS('-',p1)
                   SYSDataRecTotal=SUBSTR(p1,StartPos,Len)
                   StartPos=LASTPOS('-',p2)+1
                   Len=LENGTH(p2)-LASTPOS('-',p2)
                   SYSDataCISplits=SUBSTR(p2,StartPos,Len)
              END    /* WHEN */
              WHEN DataFlag="Y",
                 & SUBSTR(p1,1,11)="REC-DELETED" THEN DO
                   StartPos=LASTPOS('-',p2)+1
                   Len=LENGTH(p2)-LASTPOS('-',p2)
                   SYSDataCASplits=SUBSTR(p2,StartPos,Len)
                   StartPos=LASTPOS('-',p3)+1
                   Len=LENGTH(p3)-LASTPOS('-',p3)
                   SYSDataExtents=SUBSTR(p3,StartPos,Len)
              END    /* WHEN */
              WHEN DataFlag="Y",
                 & SUBSTR(p1,1,12)="REC-INSERTED" THEN DO
                   StartPos=LASTPOS('-',p2)+1
                   Len=LENGTH(p2)-LASTPOS('-',p2)
                   SYSDataCIFreeSP=SUBSTR(p2,StartPos,Len)
              END    /* WHEN */
              WHEN DataFlag="Y",
                 & SUBSTR(p1,1,11)="REC-UPDATED" THEN DO
                   StartPos=LASTPOS('-',p2)+1
                   Len=LENGTH(p2)-LASTPOS('-',p2)
                   SYSDataCAFreeSP=SUBSTR(p2,StartPos,Len)
              END    /* WHEN */
              WHEN DataFlag="Y",
                 & SUBSTR(p1,1,10)="SPACE-TYPE" THEN DO
                   StartPos=LASTPOS('-',p1)+1
                   Len=LENGTH(p1)-LASTPOS('-',p1)
                   SYSDataAllocType=SUBSTR(p1,StartPos,Len)
              END    /* WHEN */
              WHEN DataFlag="Y",
                 & SUBSTR(p1,1,9)="SPACE-PRI" THEN DO
                   StartPos=LASTPOS('-',p1)+1
                   Len=LENGTH(p1)-LASTPOS('-',p1)
                   SYSDataAllocPri=SUBSTR(p1,StartPos,Len)
              END    /* WHEN */
              WHEN DataFlag="Y",
                 & SUBSTR(p1,1,9)="SPACE-SEC" THEN DO
                   StartPos=LASTPOS('-',p1)+1
                   Len=LENGTH(p1)-LASTPOS('-',p1)
                   SYSDataAllocSec=SUBSTR(p1,StartPos,Len)
              END    /* WHEN */
              WHEN DataFlag="Y",
                 & SUBSTR(p1,1,6)="VOLSER" THEN DO
                   StartPos=LASTPOS('-',p1)+1
                   Len=LENGTH(p1)-LASTPOS('-',p1)
                   IF SYSDataVols="" THEN DO
                      SYSDataVols= SUBSTR(p1,StartPos,Len)
                   END    /* IF */
                   ELSE DO
                      SYSDataVols=SYSDataVols || "," || SUBSTR(p1,StartPos,Len)
                   END    /* ELSE */
              END    /* WHEN */
              WHEN IndexFlag="Y",
                 & p1="IN-CAT" THEN DO
                   SYSIndexCat=p3
              END    /* WHEN */
              WHEN IndexFlag="Y",
                 & SUBSTR(p1,1,6)="KEYLEN" THEN DO
                   StartPos=LASTPOS('-',p1)+1
                   Len=LENGTH(p1)-LASTPOS('-',p1)
                   SYSIndexKeyLen=SUBSTR(p1,StartPos,Len)
                   StartPos=LASTPOS('-',p2)+1
                   Len=LENGTH(p2)-LASTPOS('-',p2)
                   SYSIndexAvgLrecl=SUBSTR(p2,StartPos,Len)
                   StartPos=LASTPOS('-',p4)+1
                   Len=LENGTH(p4)-LASTPOS('-',p4)
                   SYSIndexCISize=SUBSTR(p4,StartPos,Len)
              END    /* WHEN */
              WHEN IndexFlag="Y",
                 & SUBSTR(p1,1,3)="RKP" THEN DO
                   StartPos=LASTPOS('-',p1)+1
                   Len=LENGTH(p1)-LASTPOS('-',p1)
                   SYSIndexKeyStrt=SUBSTR(p1,StartPos,Len)
                   StartPos=LASTPOS('-',p2)+1
                   Len=LENGTH(p2)-LASTPOS('-',p2)
                   SYSIndexMaxLrecl=SUBSTR(p2,StartPos,Len)
                   StartPos=LASTPOS('-',p4)+1
                   Len=LENGTH(p4)-LASTPOS('-',p4)
                   SYSIndexCIPerCA=SUBSTR(p4,StartPos,Len)
              END    /* WHEN */
              WHEN IndexFlag="Y",
                 & SUBSTR(p1,1,9)="REC-TOTAL" THEN DO
                   StartPos=LASTPOS('-',p1)+1
                   Len=LENGTH(p1)-LASTPOS('-',p1)
                   SYSIndexRecTotal=SUBSTR(p1,StartPos,Len)
                   StartPos=LASTPOS('-',p2)+1
                   Len=LENGTH(p2)-LASTPOS('-',p2)
                   SYSIndexCISplits=SUBSTR(p2,StartPos,Len)
              END    /* WHEN */
              WHEN IndexFlag="Y",
                 & SUBSTR(p1,1,11)="REC-DELETED" THEN DO
                   StartPos=LASTPOS('-',p2)+1
                   Len=LENGTH(p2)-LASTPOS('-',p2)
                   SYSIndexCASplits=SUBSTR(p2,StartPos,Len)
                   StartPos=LASTPOS('-',p3)+1
                   Len=LENGTH(p3)-LASTPOS('-',p3)
                   SYSIndexExtents=SUBSTR(p3,StartPos,Len)
                   StartPos=LASTPOS('-',p4)+1
                   Len=LENGTH(p4)-LASTPOS('-',p4)
                   SYSIndexLevels=SUBSTR(p4,StartPos,Len)
              END    /* WHEN */
              WHEN IndexFlag="Y",
                 & SUBSTR(p1,1,12)="REC-INSERTED" THEN DO
                   StartPos=LASTPOS('-',p2)+1
                   Len=LENGTH(p2)-LASTPOS('-',p2)
                   SYSIndexCIFreeSP=SUBSTR(p2,StartPos,Len)
              END    /* WHEN */
              WHEN IndexFlag="Y",
                 & SUBSTR(p1,1,11)="REC-UPDATED" THEN DO
                   StartPos=LASTPOS('-',p2)+1
                   Len=LENGTH(p2)-LASTPOS('-',p2)
                   SYSIndexCAFreeSP=SUBSTR(p2,StartPos,Len)
              END    /* WHEN */
              WHEN IndexFlag="Y",
                 & SUBSTR(p1,1,10)="SPACE-TYPE" THEN DO
                   StartPos=LASTPOS('-',p1)+1
                   Len=LENGTH(p1)-LASTPOS('-',p1)
                   SYSIndexAllocType=SUBSTR(p1,StartPos,Len)
              END    /* WHEN */
              WHEN IndexFlag="Y",
                 & SUBSTR(p1,1,9)="SPACE-PRI" THEN DO
                   StartPos=LASTPOS('-',p1)+1
                   Len=LENGTH(p1)-LASTPOS('-',p1)
                   SYSIndexAllocPri=SUBSTR(p1,StartPos,Len)
              END    /* WHEN */
              WHEN IndexFlag="Y",
                 & SUBSTR(p1,1,9)="SPACE-SEC" THEN DO
                   StartPos=LASTPOS('-',p1)+1
                   Len=LENGTH(p1)-LASTPOS('-',p1)
                   SYSIndexAllocSec=SUBSTR(p1,StartPos,Len)
              END    /* WHEN */
              WHEN IndexFlag="Y",
                 & SUBSTR(p1,1,6)="VOLSER" THEN DO
                   StartPos=LASTPOS('-',p1)+1
                   Len=LENGTH(p1)-LASTPOS('-',p1)
                   IF SYSIndexVols="" THEN DO
                      SYSIndexVols= SUBSTR(p1,StartPos,Len)
                   END    /* IF */
                   ELSE DO
                      SYSIndexVols=SYSIndexVols || ",",
                                  || SUBSTR(p1,StartPos,Len)
                   END    /* ELSE */
              END    /* WHEN */
              WHEN AssocFlag="Y" THEN DO
                   AssocStem.z=p1
                   AssocStem.0=z
                   z=z+1
              END    /* WHEN */
              OTHERWISE
                   ITERATE
   END    /* SELECT */
END    /* IF */

/* ------------------------------------------------------------------------- */
/* Display all of the available information about the VSAM File.             */
/* ------------------------------------------------------------------------- */
IF DisplayDetails = "Y" THEN DO
   SAY "  LISTCAT Information for file:"LISTDSIFile
   SAY " +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++"
   SAY "       Cluster Name             =" SYSClusterName
   SAY "       Cluster Catalog          =" SYSCatName
   SAY "       Cluster Create Date      =" SYSCreateDate
   SAY "       Cluster Associations:"
   IF AssocStem.0 <=0 THEN DO
      AssocStem.1="No Associations Found"
      AssocStem.0=1
   END    /* IF */
   DO z=1 TO AssocStem.0
      SAY "                                  "AssocStem.z
   END    /* DO */
   SAY " "
   SAY "       Data Segment Name        =" SYSDataName
   SAY "       Data Segment Catalog     =" SYSDataCat
   SAY "       Data Segment Volume      =" SYSDataVols
   SAY "       Data Segment Key Length  =" SYSDataKeyLen
   SAY "       Data Segment Key Pos     =" SYSDataKeyStrt
   SAY "       Data Segment Avg LRECL   =" SYSDataAvgLrecl
   SAY "       Data Segment Max Lrecl   =" SYSDataMaxLrecl
   SAY "       Data Segment CI Size     =" SYSDataCISize
   SAY "       Data Segment CI per CA   =" SYSDataCIPerCA
   SAY "       Data Segment Total Recs  =" SYSDataRecTotal
   SAY "       Data Segment CI Splits   =" SYSDataCISplits
   SAY "       Data Segment CI FreeSP   =" SYSDataCIFreeSP"%"
   SAY "       Data Segment CA Splits   =" SYSDataCASplits
   SAY "       Data Segment CA FreeSP   =" SYSDataCAFreeSP"%"
   SAY "       Data Segment Extents     =" SYSDataExtents
   SAY "       Data Segment Alloc Units =" SYSDataAllocType
   SAY "       Data Segment Primary     =" SYSDataAllocPri
   SAY "       Data Segment Secondary   =" SYSDataAllocSec
   SAY " "
   SAY "       Index Segment Name       =" SYSIndexName
   SAY "       Index Segment Catalog    =" SYSIndexCat
   SAY "       Index Segment Volume     =" SYSIndexVols
   SAY "       Index Segment Key Length =" SYSIndexKeyLen
   SAY "       Index Segment Key Pos    =" SYSIndexKeyStrt
   SAY "       Index Segment Avg LRECL  =" SYSIndexAvgLrecl
   SAY "       Index Segment Max Lrecl  =" SYSIndexMaxLrecl
   SAY "       Index Segment CI Size    =" SYSIndexCISize
   SAY "       Index Segment CI per CA  =" SYSIndexCIPerCA
   SAY "       Index Segment Total Recs =" SYSIndexRecTotal
   SAY "       Index Segment CI Splits  =" SYSIndexCISplits
   SAY "       Index Segment CI FreeSP  =" SYSIndexCIFreeSP"%"
   SAY "       Index Segment CA Splits  =" SYSIndexCASplits
   SAY "       Index Segment CA FreeSP  =" SYSIndexCAFreeSP"%"
   SAY "       Index Segment Extents    =" SYSIndexExtents
   SAY "       Index Segment Levels     =" SYSIndexLevels
   SAY "       Index Segment Alloc Units=" SYSIndexAllocType
   SAY "       Index Segment Primary    =" SYSIndexAllocPri
   SAY "       Index Segment Secondary  =" SYSIndexAllocSec
   SAY " "
END    /* IF */

RETURN RetCode

